// This is intended to be a bunch of things 
// that I think look good, which I will turn 
// into a full-fledged syntax later

// Goals: 
// strict, loosely typed (well-defined implicit conversions)
// memory-safe without a garbage collector
// 

// <...> for types
// [...] for lists
// {...} for blocks

int.x
<int>.y

// Implicit type of the rvalue tuple is assumed from the lvalue
<int, float, char>.set1 = [5, 2.2, 'q'];
<int.m, char.k>.set2 = set1[0,2];
set2.m *= 2;
set2[0] *= 3;
<int.y, float.z>.set3 = [set2.m, set1[1]];
set3.z *= set3.y;

// Implicit type of add is <int.a, int.b: int>
@.add1 = [int.a, int.b]: int {
	b += a;
	a--;
	return a + b;
}

// Alternative add has a compatible type, but different referencable parameter names
<int.firstNumber, int.secondNumber: int>.add2 = add1

// Alternative add has a compatible type, but no referencable parameter names
<int, int: int>.add3 = add1

add1[x, 10]

add3[x, 10]

add1[a = x, b = 10]

add2[secondNumber = 10, firstNumber = x]